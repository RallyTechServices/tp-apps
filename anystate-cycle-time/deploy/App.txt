<!DOCTYPE html>
<html>
<head>
    <title>Cycle Time (Anystate)</title>
    <!--  (c) 2014 Rally Software Development Corp.  All Rights Reserved. -->
    <!--  Build Date: Thu Jan 08 2015 08:30:07 GMT-0700 (MST) -->
    
    <script type="text/javascript">
        var APP_BUILD_DATE = "Thu Jan 08 2015 08:30:07 GMT-0700 (MST)";
        var CHECKSUM = 13523200382;
    </script>
    
    <script type="text/javascript" src="/apps/2.0rc3/sdk.js"></script>

    <script type="text/javascript">
        Rally.onReady(function() {
             
/**
 * A link that pops up a version dialog box
 */

Ext.define('Rally.technicalservices.InfoLink',{
    extend: 'Ext.Component',
    alias: 'widget.tsinfolink',
    
    /**
     * @cfg {String} informationHtml
     * Additional text to be displayed on the popup dialog (for exmaple,
     * to add a description of the app's use or functionality)
     */
    informationHtml: null,
    
    /**
     * 
     * cfg {String} title
     * The title for the dialog box
     */
     title: "Build Information",
    
    renderTpl: "<div id='{id}-infolinkWrap' class='tsinfolink'>?</div>",

    initComponent: function() {
        this.callParent(arguments);
       
    },
    
    onRender: function() {
        this.callParent(arguments);
        this.mon(this.el,'click',this.onClick,this);
    },
    _generateChecksum: function(string){
        var chk = 0x12345678,
            i;
        string = string.replace(/var CHECKSUM = .*;/,"");
        string = string.replace(/\s/g,"");  //Remove all whitespace from the string.
        
        for (i = 0; i < string.length; i++) {
            chk += (string.charCodeAt(i) * i);
        }
    
        return chk;
    },
    _checkChecksum: function(container) {
        var me = this;
        Ext.Ajax.request({
            url: document.URL,
            params: {
                id: 1
            },
            success: function (response) {
                text = response.responseText;
                if ( CHECKSUM ) {
                    if ( CHECKSUM !== me._generateChecksum(text) ) {
                        console.log("Checksums don't match!");
                        if ( me.dialog ) {
                            me.dialog.add({xtype:'container',html:'Checksums do not match'});
                        }
                    }
                }
            }
        });
    },
    onClick: function(e) {
        var me = this;
        this._checkChecksum(this);
        
        var dialog_items = [];
        
        if ( this.informationHtml ) {
            dialog_items.push({
                xtype:'container',
                html: this.informationHtml
            });
        }
                
        dialog_items.push({
            xtype:'container',
            html:"This app was created by the Rally Technical Services Team."
        });
        
        if ( APP_BUILD_DATE ) {
            dialog_items.push({
                xtype:'container',
                html:'Build date/time: ' + APP_BUILD_DATE
            });
        }
        
        if (this.dialog){this.dialog.destroy();}
        this.dialog = Ext.create('Rally.ui.dialog.Dialog',{
            defaults: { padding: 5, margin: 5 },
            closable: true,
            draggable: true,
            title: me.title,
            items: dialog_items,
            width: '60%'
        });
        this.dialog.show();
    }
});

/*
 */
Ext.define('Rally.technicalservices.Logger',{
    constructor: function(config){
        Ext.apply(this,config);
    },
    log: function(args){
        var timestamp = "[ " + Ext.util.Format.date(new Date(), "Y-m-d H:i:s.u") + " ]";
        //var output_args = arguments;
        //output_args.unshift( [ "[ " + timestamp + " ]" ] );
        //output_args = Ext.Array.push(output_args,arguments);
        
        var output_args = [];
        output_args = Ext.Array.push(output_args,[timestamp]);
        output_args = Ext.Array.push(output_args, Ext.Array.slice(arguments,0));

        window.console && console.log.apply(console,output_args);
    }

});


Ext.define('AnystateCycleCalculator', {
    extend: 'Rally.data.lookback.calculator.BaseCalculator',
    groupField: 'ScheduleState',
    
    runCalculation: function(snapshots) {
        var final_state = this.endState;
        var initial_state = this.startState;
        this.exportData = {}; 
        /* iterate over the snapshots (each of which represents a transition
         * 1.  Save the ones that are transitioning INTO the initial state in a hash by object id so that
         *     we can retrieve it for the cycle time
         * 2.  For the ones that are transitioning INTO the final state, find the _validfrom from the hash
         *     and calculate the cycle time
         *     
         */
         var dates_by_oid = {};
         var start_date = Rally.util.DateTime.add(new Date(), "year", 50);
         var end_date = Rally.util.DateTime.add(new Date(), "year", -50);
         Ext.Array.each(snapshots, function(snapshot){
            // _PreviousValues.ScheduleState == null means we got created right into the state
            // _PreviousValues.ScheduleState == undefined means this particular change wasn't a transition (so we'll look for > 0)
            // TODO: check for just after the initial_state?  skipping is a problem to solve.
            var state = snapshot[this.groupField];

            if (dates_by_oid[snapshot.ObjectID] == undefined){
                var object_type = snapshot._TypeHierarchy.slice(-1)[0];
                dates_by_oid[snapshot.ObjectID] = {_finalDate: null, _startDate: null, _type: object_type};
            }
            if (state == final_state && snapshot._ValidFrom){
                dates_by_oid[snapshot.ObjectID]._finalDate = Rally.util.DateTime.fromIsoString(snapshot._ValidFrom);  

                if (Rally.util.DateTime.getDifference(dates_by_oid[snapshot.ObjectID]._finalDate,end_date,'day') > 0){
                    end_date = Rally.util.DateTime.fromIsoString(snapshot._ValidFrom);  

                } 
            }

            if (state == initial_state && snapshot._ValidFrom){ //0 means that this is the first snapshot
                var diff = 0; 
                if (dates_by_oid[snapshot.ObjectID]._startDate){
                    var diff = Rally.util.DateTime.getDifference(new Date(dates_by_oid[snapshot.ObjectID]._startDate), new Date(snapshot._ValidFrom),'day');
                }
                if (diff >= 0){  //we want the earliest date this transitioned into the start state
                    dates_by_oid[snapshot.ObjectID]._startDate = Rally.util.DateTime.fromIsoString(snapshot._ValidFrom);
                }

                if (Rally.util.DateTime.getDifference(dates_by_oid[snapshot.ObjectID]._startDate,start_date,'day') < 0){
                    start_date = Rally.util.DateTime.fromIsoString(snapshot._ValidFrom);  
                } 
            }
         }, this);
         var categories = this._getCategories(start_date, end_date, dates_by_oid, this.granularity);
       // console.log('categories', categories);

         var series = [];
         series.push(this._getSeries(categories, dates_by_oid, this.granularity));  
         series.push(this._getSeries(categories, dates_by_oid, this.granularity,'HierarchicalRequirement'));  
         series.push(this._getSeries(categories, dates_by_oid, this.granularity,'Defect'));  
         //console.log('series',series);
         
        return {
            series: series,
            categories: categories
        }
    },
    _getDateKey: function(d, granularity){
        switch(granularity){
            case 'Week':
                var weekday_num = Rally.util.DateTime.format(d, 'N');
                var day_offset = weekday_num - 1;  
                var day = d.getDate() - day_offset;
                var week_date = new Date(d.getFullYear(),d.getMonth(),day);
                return Rally.util.DateTime.formatWithDefault(week_date);

//                return 'Week' + Rally.util.DateTime.format(d, 'W y');
            case 'Month':
                return Rally.util.DateTime.format(d, 'M y');
            default:
        }
        return Rally.util.DateTime.format(d, 'Y-m-d');  
    },
    
    _getCategories: function(start_date, end_date, dates_by_oid, granularity){
        var categories = [];
        for (var d=start_date; d < end_date; d = Rally.util.DateTime.add(d,"day",1)){
            var date_key = this._getDateKey(d, granularity);  
            if (!Ext.Array.contains(categories, date_key)){
                categories.push(date_key);
            }
        }
        return categories;  
    },
    
    _getSeries: function(categories, dates_by_oid, granularity, type){
        var stats_by_date = {}; 
        var summary = {noStartState: 0, noEndState: 0, negativeCycleTime: 0, total: 0, Defect: 0, HierarchicalRequirement: 0};

        Ext.Object.each(dates_by_oid, function(oid, dates){
            if (dates._startDate && dates._finalDate && (type == undefined || dates._type == type )) {
                var diff = Rally.util.DateTime.getDifference(dates._finalDate, dates._startDate,'day');
                dates_by_oid[oid]._cycleTime = diff;
                var fd_key = this._getDateKey(dates._finalDate, granularity);

                if (diff < 0){
                    summary.negativeCycleTime++;
                }
                    
                if (stats_by_date[fd_key] == undefined ){
                    stats_by_date[fd_key] = []; 
                }
                stats_by_date[fd_key].push(diff)
            } else {
                if (dates._startDate == null) {
                    summary.noStartState++;
                }
                if (dates._finalDate == null){
                    summary.noEndState++;
                }
            }
            summary.total++; 
            summary[dates._type]++;
        },this);
        
        var data = [];
        var export_data ='';  
            for (var i=0; i<categories.length; i++){
                var date_key = categories[i];
                data[i]=0;
                var sdev = 0;
                var count = 0;
                if (stats_by_date[date_key] && stats_by_date[date_key].length > 0){
                    count = stats_by_date[date_key].length;
                    sdev = this._getStandardDeviation(stats_by_date[date_key]);
                    data[i] = Math.max(Ext.Array.mean(stats_by_date[date_key]),0); 
                } 
                if (export_data.length == 0){
                    export_data = "Date,Avg Cycle Time,Artifact Count,Standard Deviation\n";
                }
                export_data += Ext.String.format("{0},{1},{2},{3}\n",date_key,data[i], count, sdev);
            }
        
        var export_data_type = this._getSeriesName(type);  
        if (type == undefined){
            export_data_type = 'Combined';
            this.summary = summary;  
            this.exportData['Raw Data'] = this._getRawDataExport(stats_by_date);
        }
        this.exportData[export_data_type] = export_data;
        
        return {
             name: this._getSeriesName(type),
             data: data,
             display: 'line'
         };
    },
    _getRawDataExport: function(stats_by_date){
        var text = Ext.String.format('Date, Average, StdDev, CycleTime\n');
        Ext.each(Object.keys(stats_by_date), function(key){
            text += Ext.String.format('{0},{1},{2},{3}\n',key,Ext.Array.mean(stats_by_date[key]),this._getStandardDeviation(stats_by_date[key]),stats_by_date[key].join(','));
        },this);
        return text;
    },
    _getStandardDeviation: function(vals){
        var avg = Ext.Array.mean(vals);
        
        var sq_diff_array = vals.map(function(v){
          var diff = v - avg;
          var sq_diff = diff * diff;
          return sq_diff;
        });
        var avg_sq_diff = Ext.Array.mean(sq_diff_array);
       
        var sdev = Math.sqrt(avg_sq_diff);
        return sdev;        
    },
    _getSeriesName: function(type){
        var type_text = "Combined";
        if (type) {
            type_text = type;
            if (type == 'HierarchicalRequirement'){
                type_text = "User Story";
            }
        }
        return Ext.String.format(type_text);   
    },

});
Ext.define('Rally.technicalservices.FileUtilities', {
    singleton: true,
    logger: new Rally.technicalservices.Logger(),
    
    saveTextAsFile: function(textToWrite, fileName)
    {
        var textFileAsBlob = new Blob([textToWrite], {type:'text/plain'});
        var fileNameToSaveAs = fileName;

        var downloadLink = document.createElement("a");
        downloadLink.download = fileNameToSaveAs;
        downloadLink.innerHTML = "Download File";
        if (window.webkitURL != null)
        {
            // Chrome allows the link to be clicked
            // without actually adding it to the DOM.
            downloadLink.href = window.webkitURL.createObjectURL(textFileAsBlob);
        }
        else
        {
            // Firefox requires the link to be added to the DOM
            // before it can be clicked.
            downloadLink.href = window.URL.createObjectURL(textFileAsBlob);
            downloadLink.onclick = destroyClickedElement;
            downloadLink.style.display = "none";
            document.body.appendChild(downloadLink);
        }
        downloadLink.click();
    },
    
    destroyClickedElement: function(event)
    {
        document.body.removeChild(event.target);
    }
    
});
Ext.define('CustomApp', {
    extend: 'Rally.app.App',
    componentCls: 'app',
    logger: new Rally.technicalservices.Logger(),
    groupField: 'ScheduleState',
    items: [
        {xtype:'container',itemId:'selector_box', layout: {type: 'hbox'}, padding:5, flex: 1},
        {xtype:'container',itemId:'display_box'},
    ],
    
    launch: function() {
        
        this._validateProject().then({
            scope: this,
            success: function(){
              this._initializeApp(); 
            },
            failure: function(error){
                alert(error);
            }
        });
        
    },
    _initializeApp: function(){
        this.logger.log('_initializeApp');
        
        Ext.create('AnystateCycleCalculator',{});

        this.down('#selector_box').add({
            xtype: 'tsinfolink',
            title: 'Anystate Cycle Time App',
            informationHtml: this._getAppInformation()
        });
        this.down('#selector_box').add({
            xtype: 'rallyfieldvaluecombobox',
            itemId: 'cb-from-state',
            model: 'HierarchicalRequirement',
            field: 'ScheduleState',
            fieldLabel:  'Start',
            labelAlign: 'right',
            labelWidth: 50,
            margin: 10
        });
        this.down('#selector_box').add({
            xtype: 'rallyfieldvaluecombobox',
            itemId: 'cb-to-state',
            model: 'HierarchicalRequirement',
            field: 'ScheduleState',
            fieldLabel:  'End',
            labelAlign: 'right',
            labelWidth: 50,
            margin: 10
           
        });
        this.down('#selector_box').add({
            xtype: 'rallycombobox',
            itemId: 'cb-granularity',
            store: ['Week','Month'],
            fieldLabel:  'Granularity',
            labelAlign: 'right',
            labelWidth: 75,
            margin: 10
        });
        this.down('#selector_box').add({
            xtype: 'rallybutton',
            itemId: 'btn-update',
            text: 'Update',
            scope: this,
            margin: 10,
            handler: this._createChart
        });
        this.down('#selector_box').add({
            xtype: 'rallycombobox',
            itemId: 'cb-export-format',
            store: ['Combined','User Stories','Defects','Raw Data'],
            fieldLabel: 'Series to Export',
            labelWidth: 125,
            labelAlign: 'right',
            margin: 10
        });
        this.down('#selector_box').add({
            xtype: 'rallybutton',
            itemId: 'btn-export',
            text: 'Export',
            scope: this,
            margin: 10,
            disabled: true, 
            handler: this._exportData
        });        
    },
    _validateProject: function(){
        var deferred = Ext.create('Deft.Deferred');
        var project = this.getContext().getProject();
        var me = this; 
        Rally.data.ModelFactory.getModel({
            type: 'Project',
            success: function(model) {
                scope: this,
                model.load(project.ObjectID, {
                    fetch: ['Children'],
                    callback: function(result, operation){
                        me.logger.log('_validateProject',result,operation);
                        if (operation.wasSuccessful()){
                            if (result.get('Children').Count > 0 ){
                                me.logger.log('_validateProject failed due to children',result.get('Children').Count);
                                deferred.reject('Currently selected Team contains children.  Please select a Team with no children from the Project selector.');
                            } else {
                               deferred.resolve(); 
                            }
                        } else {
                            me.logger.log('_validateProject failed due to error',operation);

                            deferred.reject ('Unable to validate project due to an error loading the project.');
                        }
                    }
                });
            }
        });

        return deferred; 
    },
    _getStartState: function(){
        return this.down('#cb-from-state').getValue();
    },
    _getEndState: function(){
        return this.down('#cb-to-state').getValue();
    },
    _getGranularity: function(){
        return this.down('#cb-granularity').getValue();
    },
    _getTickInterval: function(granularity){
        var tick_interval = 30;
        if (granularity == 'Week') {tick_interval = 5;}
        if (granularity == 'Month'){ tick_interval = 1;}
        return tick_interval;  
    },
    _exportData: function(){
        this.logger.log('_exportData');
        var export_data_type = this.down('#cb-export-format').getValue();
        var export_text = this.down('#rally-chart').calculator.exportData[export_data_type];
        var file_name = Ext.String.format('{0}-cycletime-{1}-to-{2}.csv',export_data_type, this._getStartState(), this._getEndState());
        Rally.technicalservices.FileUtilities.saveTextAsFile(export_text, file_name);
    },
    _validateSelectedStates: function(){
        var from_cb = this.down('#cb-from-state');
        var to_cb = this.down('#cb-to-state');
        
        var from_idx = from_cb.getStore().findExact(from_cb.getValueField(),from_cb.getValue());
        var to_idx = to_cb.getStore().findExact(to_cb.getValueField(),to_cb.getValue());
        
        return from_idx < to_idx;
    },
    _createChart: function(){
        this.logger.log('_createChart');
        
        var start_state = this.down('#cb-from-state').getValue();
        var end_state = this.down('#cb-to-state').getValue();

        if (!this._validateSelectedStates()){
            alert('The From State must come before the To State.');
            return;
        }
        
        var title_text = 'Average Cycle Time (Days) from ' + start_state + ' to ' + end_state;
        var granularity = this._getGranularity();
        var tick_interval = this._getTickInterval(granularity);  
        
        if (this.down('#rally-chart')){
            this.down('#rally-chart').destroy();
        }
        if (this.down('#summary-box')){
            this.down('#summary-box').destroy();
        }
        
        this.down('#display_box').add({
            xtype: 'rallychart',
            itemId: 'rally-chart',
            calculatorType: 'AnystateCycleCalculator',
            storeType: 'Rally.data.lookback.SnapshotStore',
            storeConfig: this._getStoreConfig(),
            calculatorConfig: {
                startState: this._getStartState(),
                endState: this._getEndState(),
                granularity: granularity
            },
            chartConfig: {
                chart: {
                    zoomType: 'xy',
                    type: 'line'
                },
                title: {
                    text: title_text
                },
                xAxis: {
//                    tickmarkPlacement: 'on',
                    tickInterval: tick_interval,
                    title: {
                        text: 'Date Entered ' + end_state
                    }
                },
                yAxis: [
                    {
                        title: {
                            text: 'Days'
                        }
                    }
                ],
                plotOptions: {
                    series: {
                        marker: {
                            enabled: false
                        }
                    }
                },
            },
            listeners: {
                scope: this,
                readyToRender: function(chart){
                    this.down('#btn-export').setDisabled(false);
                    this._updateSummary(chart.calculator.summary);
                }
            }
        });

    },
    _getStoreConfig: function(){
       var start_state = this._getStartState();
       var end_state = this._getEndState(); 
        return {
            find: {
                 "Children": null,
                 "_ProjectHierarchy": this.getContext().getProject().ObjectID,
                 "_TypeHierarchy": {$in: ['HierarchicalRequirement','Defect']},
                 "ScheduleState": {$in: [start_state, end_state]},
                 "$or": [{"_PreviousValues.ScheduleState": {$exists: true}},
                      {"_SnapshotNumber": 0}]
                 },
            fetch: ['ObjectID','ScheduleState','_ValidFrom','_ValidTo','_PreviousValues.ScheduleState','_SnapshotNumber','_TypeHierarchy'],
            hydrate: ['ScheduleState',"_PreviousValues.ScheduleState", '_TypeHierarchy'],
            compress: true,
            sort: {
                _ValidFrom: 1
            },
            context: this.getContext().getDataContext(),
            limit: Infinity
        };
    },
    _updateSummary: function(summary_data){
        var summary_tpl = new Ext.Template('<div align="center">Artifacts that did not transition into the Start State: {noStartState}<br>Artifacts that did not transition into End State: {noEndState}<br> Artifacts with negative Cycle Time:  {negativeCycleTime}<br>Total Defects:  {Defect}<br>Total Stories:  {HierarchicalRequirement}<br>Total Artifacts:  {total}</div>');
        var summary = this.down('#display_box').add({
            xtype: 'container',
            itemId: 'summary-box',
            tpl: summary_tpl,
            flex: 1
        });
        summary.update(summary_data);
    },
    _getAppInformation: function(){
        return '<li>The selected Start ScheduleState must fall before the selected End ScheduleState in the workflow' +  
        '<li>Granularity:  If Week is selected, then cycle time will be aggregated for the week starting on the date shown on the x-axis.  Each week begins on a Monday.  If Month is selected, then cycle times will be aggregated for the Month.'  +
        '<li>Cycle time for an artifact is calculated in days.  Cycle time will be calculated from the first time the artifact enters the Start ScheduleState until the last time the artifact enters the End ScheduleState.' +
        '<li>Cycle time is only calculated for artifacts that have transitioned into the  Start ScheduleState and into the End ScheduleState.  If an artifact transitions into one of the selected states but not both, it will not be included into cycle time calculations.' +
        '<li>If an artifact transitions into the End ScheduleState before it transitions into the Start ScheduleState and never transitions back into the End ScheduleState, it will have a negative cycle time.  Negative cycle times are not included in cycle time calculations.' +
        '<li>Series data can be exported in CSV format using the Export button.' +
        '<li>The Raw Data export will export the individual cycle time values for each point of the selected granularity.'
    }

});
            
               Rally.launchApp('CustomApp', {
                   name: 'Cycle Time (Anystate)'
               });
        });
    </script>
    
    <style type="text/css">

.app {
}
.tsinfolink {
  //  position:absolute;
 //   right:0px;
    width: 16px;
    height: 16px;
    border-radius: 8px;
    text-align: center;
    color: white;
    background: #C0C0C0;
    border-style: solid;
    border-width: 1px;
    margin-top: 10px;
    margin-left: 10px;
    cursor: pointer;
}

    </style>

</head>
<body></body>
</html>