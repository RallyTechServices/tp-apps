<!DOCTYPE html>
<html>
<head>
    <title>Data Import Update</title>
    <!--  (c) 2014 Rally Software Development Corp.  All Rights Reserved. -->
    <!--  Build Date: Mon Dec 01 2014 11:08:05 GMT-0700 (MST) -->
    
    <script type="text/javascript">
        var APP_BUILD_DATE = "Mon Dec 01 2014 11:08:05 GMT-0700 (MST)";
        var CHECKSUM = 2951811700;
    </script>
    
    <script type="text/javascript" src="/apps/2.0rc3/sdk.js"></script>

    <script type="text/javascript">
        Rally.onReady(function() {
             
/**
 * A link that pops up a version dialog box
 */

Ext.define('Rally.technicalservices.InfoLink',{
    extend: 'Ext.Component',
    alias: 'widget.tsinfolink',
    
    /**
     * @cfg {String} informationHtml
     * Additional text to be displayed on the popup dialog (for exmaple,
     * to add a description of the app's use or functionality)
     */
    informationHtml: null,
    
    /**
     * 
     * cfg {String} title
     * The title for the dialog box
     */
     title: "Build Information",
    
    renderTpl: "<div id='{id}-infolinkWrap' class='tsinfolink'>i</div>",

    initComponent: function() {
        this.callParent(arguments);
       
    },
    
    onRender: function() {
        this.callParent(arguments);
        this.mon(this.el,'click',this.onClick,this);
    },
    _generateChecksum: function(string){
        var chk = 0x12345678,
            i;
        string = string.replace(/var CHECKSUM = .*;/,"");
        string = string.replace(/\s/g,"");  //Remove all whitespace from the string.
        
        for (i = 0; i < string.length; i++) {
            chk += (string.charCodeAt(i) * i);
        }
    
        return chk;
    },
    _checkChecksum: function(container) {
        var me = this;
        Ext.Ajax.request({
            url: document.URL,
            params: {
                id: 1
            },
            success: function (response) {
                text = response.responseText;
                if ( CHECKSUM ) {
                    if ( CHECKSUM !== me._generateChecksum(text) ) {
                        console.log("Checksums don't match!");
                        if ( me.dialog ) {
                            me.dialog.add({xtype:'container',html:'Checksums do not match'});
                        }
                    }
                }
            }
        });
    },
    onClick: function(e) {
        var me = this;
        this._checkChecksum(this);
        
        var dialog_items = [];
        
        if ( this.informationHtml ) {
            dialog_items.push({
                xtype:'container',
                html: this.informationHtml
            });
        }
                
        dialog_items.push({
            xtype:'container',
            html:"This app was created by the Rally Technical Services Team."
        });
        
        if ( APP_BUILD_DATE ) {
            dialog_items.push({
                xtype:'container',
                html:'Build date/time: ' + APP_BUILD_DATE
            });
        }
        
        if (this.dialog){this.dialog.destroy();}
        this.dialog = Ext.create('Rally.ui.dialog.Dialog',{
            defaults: { padding: 5, margin: 5 },
            closable: true,
            draggable: true,
            title: me.title,
            items: dialog_items
        });
        this.dialog.show();
    }
});

/*
 */
Ext.define('Rally.technicalservices.Logger',{
    constructor: function(config){
        Ext.apply(this,config);
    },
    log: function(args){
        var timestamp = "[ " + Ext.util.Format.date(new Date(), "Y-m-d H:i:s.u") + " ]";
        //var output_args = arguments;
        //output_args.unshift( [ "[ " + timestamp + " ]" ] );
        //output_args = Ext.Array.push(output_args,arguments);
        
        var output_args = [];
        output_args = Ext.Array.push(output_args,[timestamp]);
        output_args = Ext.Array.push(output_args, Ext.Array.slice(arguments,0));

        window.console && console.log.apply(console,output_args);
    }

});

Ext.define('Rally.technicalservices.FileUtilities', {
    singleton: true,
    logger: new Rally.technicalservices.Logger(),
    
    saveTextAsFile: function(textToWrite, fileName)
    {
        var textFileAsBlob = new Blob([textToWrite], {type:'text/plain'});
        var fileNameToSaveAs = fileName;

        var downloadLink = document.createElement("a");
        downloadLink.download = fileNameToSaveAs;
        downloadLink.innerHTML = "Download File";
        if (window.webkitURL != null)
        {
            // Chrome allows the link to be clicked
            // without actually adding it to the DOM.
            downloadLink.href = window.webkitURL.createObjectURL(textFileAsBlob);
        }
        else
        {
            // Firefox requires the link to be added to the DOM
            // before it can be clicked.
            downloadLink.href = window.URL.createObjectURL(textFileAsBlob);
            downloadLink.onclick = destroyClickedElement;
            downloadLink.style.display = "none";
            document.body.appendChild(downloadLink);
        }
        downloadLink.click();
    },
    
    destroyClickedElement: function(event)
    {
        document.body.removeChild(event.target);
    },
    getFileToLoad: function(){
        Ext.create('Ext.form.Panel', {
            title: 'Upload a Photo',
            width: 400,
            bodyPadding: 10,
            frame: true,
            renderTo: Ext.getBody(),
            items: [{
                xtype: 'filefield',
                name: 'photo',
                fieldLabel: 'Photo',
                labelWidth: 50,
                msgTarget: 'side',
                allowBlank: false,
                anchor: '100%',
                buttonText: 'Select Photo...'
            }],

            buttons: [{
                text: 'Upload',
                handler: function() {
                    var form = this.up('form').getForm();
                    if(form.isValid()){
                        form.submit({
                            url: 'photo-upload.php',
                            waitMsg: 'Uploading your photo...',
                            success: function(fp, o) {
                                Ext.Msg.alert('Success', 'Your photo "' + o.result.file + '" has been uploaded.');
                            }
                        });
                    }
                }
            }]
        });        
    }
});

Ext.define('CustomApp', {
    extend: 'Rally.app.App',
    componentCls: 'app',
    logger: new Rally.technicalservices.Logger(),
    items: [
        {xtype:'container',itemId:'selection_box',layout: {type: 'hbox'}, padding:10},
        {xtype:'container',itemId:'grid_box'},
        {xtype:'tsinfolink'}
    ],
    launch: function() {
        this.down('#selection_box').add({
            xtype: 'rallyportfolioitemtypecombobox',
            itemId: 'type-combo',
            fieldLabel: 'PortfolioItem Type',
            labelWidth: 100,
            labelAlign: 'right',
            margin: 10
        });
        
        this.down('#selection_box').add({
            xtype: 'rallybutton',
            text: 'Import...',
            margin: 10,
            scope: this,
            handler: this._startImport
        });

        this.down('#selection_box').add({
            xtype: 'rallybutton',
            text: 'Save',
            itemId: 'save-button',
            margin: 10,
            scope: this,
            handler: this._saveUpdates,
            disabled: true
        });    
    },
    _startImport: function(){
        this.logger.log('_startImport');
        
        var pi_type = this.down('#type-combo').getRecord().get('TypePath');
        var formatted_ids = ['F32','F33','F34'];
        var fetch_fields = ['FormattedID','c_Cities','c_Country','c_CountryText'];
        var imported_data = [
                             {'FormattedID':'F32','c_Cities':'Pittsburgh','c_Country':'USA', 'c_CountryText':'United States'},
                             {'FormattedID':'F33','c_Cities':'San Diego','c_Country':'USA', 'c_CountryText':'United States'},
                             {'FormattedID':'F34','c_Cities':'Helsinki','c_Country':'Finland', 'c_CountryText':'Finland'}
                             ];
        
        this._fetchItems(pi_type,formatted_ids, fetch_fields).then({
            scope: this,
            success: function(store){
                
                //update store with values to be saved
                this._updateValues(store,imported_data);
                
                
                this.down('#grid_box').add({
                    xtype: 'rallygrid',
                    itemId: 'update-grid',
                    store: store,
                    columnCfgs: this._getColumnCfgs(fetch_fields,this.down('#type-combo').getRecord())
                });
                this.down('#save-button').setDisabled(false);

            },
            failure: function(error){
                alert (error);
            }
        });

    },
    _updateValues: function(store, imported_data){
        this.logger.log('_updateValues');
        Ext.each(imported_data, function(d){
            var fid = d.FormattedID;
            var rec = store.findExactRecord('FormattedID',fid);
            Ext.each(Object.keys(d),function(key){
                if (key != 'FormattedID'){
                    rec.set(key,d[key]);
                }
            },this);
            
        },this);
    },
    _getColumnCfgs: function(fields,model){
        var gcolcfgs = [];
        Ext.each(fields, function(f){
            var colcfgs = {};
            colcfgs['dataIndex'] = f;
            colcfgs['text'] = f;
            gcolcfgs.push(colcfgs);
        });
        return gcolcfgs;
    },
    _saveUpdates: function(){
        this.logger.log('_saveUpdates');
        var updates_to_make = this.down('#update-grid').getStore().getUpdatedRecords();
        Ext.each(updates_to_make, function(rec){
            rec.save();
        },this);
        this.down('#save-button').setDisabled(true);
    },
    _fetchItems: function(type, formatted_ids, fetch_fields){
        this.logger.log('_fetchItems', type, formatted_ids, fetch_fields);
        var deferred = Ext.create('Deft.Deferred');
        
        //TODO may need to chunk
        var filter = null;
        Ext.each(formatted_ids, function(fid){
            if (filter == null){
                filter = Ext.create('Rally.data.wsapi.Filter', {
                     property: 'FormattedID',
                     value: fid
                });
            } else {
                filter = filter.or(Ext.create('Rally.data.wsapi.Filter', {
                     property: 'FormattedID',
                     value: fid}));
            }
        },this);
        
        Ext.create('Rally.data.wsapi.Store',{
            model: type,
            autoLoad: true, 
            fetch: fetch_fields,
            filters: [filter],
            listeners: {
                scope: this, 
                load: function(store, data, success) {
                    this.logger.log('store Loaded', store, data, success);
                    if (success){
                        deferred.resolve(store);
                    } else {
                        deferred.reject('_fetchItems failed to load PortfolioItems');
                    }
                }
            }
        });
        return deferred;
    }
});
            
               Rally.launchApp('CustomApp', {
                   name: 'Data Import Update'
               });
        });
    </script>
    
    <style type="text/css">

.app {
}
.tsinfolink {
    position:absolute;
    right:0px;
    width: 14px;
    height: 14px;
    border-radius: 7px;
    text-align: center;
    color: white;
    background: #C0C0C0;
    border-style: solid;
    border-width: 1px;
    margin-top: 25px;
    margin-right: 5px;
    cursor: pointer;
}
    </style>

</head>
<body></body>
</html>